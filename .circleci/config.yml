version: 2.1

orbs:
  node: circleci/node@5.1.0

commands:
  notify-telegram:
    parameters:
      status:
        type: string
      step:
        type: string
        default: "build"
      service:
        type: string
        default: "CircleCI"
    steps:
      - run:
          name: Notify Telegram
          when: always
          command: |
            # Function to send Telegram message
            send_telegram_message() {
              local MESSAGE="$1"
              curl -s "https://api.telegram.org/bot7801299262:AAFTUsvVxL59EzZHQfAcdLYOgb4kK5B42Fg/sendMessage" \
                -d "chat_id=6894773989" \
                -d "text=${MESSAGE}" \
                -d "parse_mode=HTML"
            }

            # CircleCI notification
            if [ "<< parameters.service >>" = "CircleCI" ]; then
              if [ "<< parameters.status >>" = "success" ]; then
                EMOJI="‚úÖ"
                STATUS="th√†nh c√¥ng"
              else
                EMOJI="‚ùå"
                STATUS="th·∫•t b·∫°i"
              fi
              
              MESSAGE="${EMOJI} <b>${CIRCLE_PROJECT_REPONAME}</b>%0A%0AüîÑ <b>Tr·∫°ng th√°i:</b> << parameters.step >> ${STATUS}%0Aüë§ <b>Branch:</b> ${CIRCLE_BRANCH}%0AüèóÔ∏è <b>Build:</b> #${CIRCLE_BUILD_NUM}%0Aüìù <b>Commit:</b> ${CIRCLE_SHA1}%0A‚è±Ô∏è <b>Th·ªùi gian:</b> $(date '+%Y-%m-%d %H:%M:%S')"
              send_telegram_message "${MESSAGE}"
            fi

            # Render deployment monitoring
            if [ "<< parameters.service >>" = "Render" ]; then
              # Monitor backend deployment
              BACKEND_STATUS=$(curl -s https://circleci-demo.onrender.com/health | jq -r '.status')
              if [ "$BACKEND_STATUS" = "healthy" ]; then
                BACKEND_EMOJI="‚úÖ"
                BACKEND_STATUS_MSG="ho·∫°t ƒë·ªông"
              else
                BACKEND_EMOJI="‚ùå"
                BACKEND_STATUS_MSG="kh√¥ng ho·∫°t ƒë·ªông"
              fi

              # Monitor frontend by checking if the page loads
              if curl -s -f https://circleci-demo-1.onrender.com > /dev/null; then
                FRONTEND_EMOJI="‚úÖ"
                FRONTEND_STATUS_MSG="ho·∫°t ƒë·ªông"
              else
                FRONTEND_EMOJI="‚ùå"
                FRONTEND_STATUS_MSG="kh√¥ng ho·∫°t ƒë·ªông"
              fi

              # Send Render deployment status
              MESSAGE="üöÄ <b>Render Deployment Status</b>%0A%0A${BACKEND_EMOJI} <b>Backend:</b> ${BACKEND_STATUS_MSG}%0Aüîó https://circleci-demo.onrender.com%0A%0A${FRONTEND_EMOJI} <b>Frontend:</b> ${FRONTEND_STATUS_MSG}%0Aüîó https://circleci-demo-1.onrender.com%0A%0A‚è±Ô∏è <b>Th·ªùi gian:</b> $(date '+%Y-%m-%d %H:%M:%S')"
              send_telegram_message "${MESSAGE}"
            fi

jobs:
  build:
    docker:
      - image: cimg/node:18.0
    steps:
      - checkout
      - node/install-packages:
          app-dir: ./server
      - run:
          name: Run Linting and Tests
          command: |
            cd server
            npm install eslint --save-dev
            # Store lint result
            npm run lint
            LINT_RESULT=$?
            
            # Store test result if lint passes
            if [ $LINT_RESULT -eq 0 ]; then
              npm test
              TEST_RESULT=$?
            else
              TEST_RESULT=1
            fi
            
            # Create status file
            echo "LINT_RESULT=$LINT_RESULT" > /tmp/build_status
            echo "TEST_RESULT=$TEST_RESULT" >> /tmp/build_status
            
            # Exit with error if either lint or test failed
            [ $LINT_RESULT -eq 0 ] && [ $TEST_RESULT -eq 0 ]
      
      - run:
          name: Notify Build Status
          when: always
          command: |
            # Source build status
            source /tmp/build_status
            
            if [ "$LINT_RESULT" = "0" ] && [ "$TEST_RESULT" = "0" ]; then
              EMOJI="‚úÖ"
              STATUS="th√†nh c√¥ng"
              DETAILS=""
            else
              EMOJI="‚ùå"
              STATUS="th·∫•t b·∫°i"
              if [ "$LINT_RESULT" != "0" ]; then
                DETAILS="%0A‚ùå L·ªói ESLint - Ki·ªÉm tra ƒë·ªãnh d·∫°ng code"
              elif [ "$TEST_RESULT" != "0" ]; then
                DETAILS="%0A‚ùå L·ªói Tests - Ki·ªÉm tra unit test"
              fi
            fi
            
            MESSAGE="${EMOJI} <b>${CIRCLE_PROJECT_REPONAME}</b>%0A%0AüîÑ <b>Tr·∫°ng th√°i:</b> Build ${STATUS}${DETAILS}%0Aüë§ <b>Branch:</b> ${CIRCLE_BRANCH}%0AüèóÔ∏è <b>Build:</b> #${CIRCLE_BUILD_NUM}%0Aüìù <b>Commit:</b> ${CIRCLE_SHA1}%0A‚è±Ô∏è <b>Th·ªùi gian:</b> $(date '+%Y-%m-%d %H:%M:%S')"
            
            curl -s "https://api.telegram.org/bot7801299262:AAFTUsvVxL59EzZHQfAcdLYOgb4kK5B42Fg/sendMessage" \
              -d "chat_id=6894773989" \
              -d "text=${MESSAGE}" \
              -d "parse_mode=HTML"

  deploy:
    docker:
      - image: cimg/node:18.0
    steps:
      - checkout
      - run:
          name: Prepare for Deployment
          command: |
            # Ensure server/package.json exists in the deployment
            cd server
            npm install --production
      - run:
          name: Deploy to Render
          command: |
            # Deploy with proper path configuration
            curl -X POST \
              -H "Accept: application/json" \
              -H "Content-Type: application/json" \
              -d '{"path": "server"}' \
              "https://api.render.com/deploy/srv-ctl3cnlds78s73c3ktdg?key=rnd_aNr7V6i33gzm6QE3BeyGvJwwmohf"
            
            echo "Deployment triggered successfully. Check Render dashboard for status."
      - run:
          name: Wait for Deployment and Monitor Status
          command: |
            echo "Checking deployment status..."
            
            MAX_RETRIES=20  # T·ªïng th·ªùi gian t·ªëi ƒëa = 20 * 10s = 200s
            RETRY_COUNT=0
            
            # Function to check service status
            check_services() {
              # Check backend
              if curl -s https://circleci-demo.onrender.com/health | grep -q "healthy"; then
                BACKEND_OK=1
              else
                BACKEND_OK=0
              fi
              
              # Check frontend
              if curl -s -f https://circleci-demo-1.onrender.com > /dev/null; then
                FRONTEND_OK=1
              else
                FRONTEND_OK=0
              fi
              
              # Return success if both are up
              [ $BACKEND_OK -eq 1 ] && [ $FRONTEND_OK -eq 1 ]
            }
            
            # Loop until both services are up or max retries reached
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
              
              if check_services; then
                echo "‚úÖ All services are up!"
                break
              fi
              
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "‚ùå Deployment check timed out after $MAX_RETRIES attempts"
                # Continue anyway as services might still be starting
              else
                echo "‚è≥ Waiting 10 seconds before next check..."
                sleep 10
              fi
            done

      # Notify Render deployment status
      - notify-telegram:
          status: success
          step: "Deploy"
          service: "Render"

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            branches:
              only: 
                - main
                - master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: 
                - main
                - master