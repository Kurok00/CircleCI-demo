version: 2.1

orbs:
  node: circleci/node@5.1.0

commands:
  notify-telegram:
    parameters:
      status:
        type: string
      step:
        type: string
        default: "build"
    steps:
      - run:
          name: Notify Telegram
          when: always
          command: |
            # Determine emoji and status message
            if [ "<< parameters.status >>" = "success" ]; then
              EMOJI="✅"
              STATUS="thành công"
            else
              EMOJI="❌"
              STATUS="thất bại"
            fi
            
            # Create notification message
            MESSAGE="${EMOJI} *<< parameters.step >>*%0A%0A*Project:* ${CIRCLE_PROJECT_REPONAME}%0A*Branch:* ${CIRCLE_BRANCH}%0A*Status:* ${STATUS}%0A*Build:* #${CIRCLE_BUILD_NUM}%0A*Time:* $(date '+%Y-%m-%d %H:%M:%S')"
            
            # Send to Telegram
            curl -s "https://api.telegram.org/bot7801299262:AAFTUsvVxL59EzZHQfAcdLYOgb4kK5B42Fg/sendMessage" \
              -d "chat_id=6894773989" \
              -d "text=${MESSAGE}" \
              -d "parse_mode=Markdown"

jobs:
  build:
    docker:
      - image: cimg/node:18.0
    steps:
      - checkout
      - node/install-packages:
          app-dir: ./server
      - run:
          name: Run Linting and Tests
          command: |
            cd server
            npm install eslint --save-dev
            # Store lint result
            npm run lint
            LINT_RESULT=$?
            
            # Store test result if lint passes
            if [ $LINT_RESULT -eq 0 ]; then
              npm test
              TEST_RESULT=$?
            else
              TEST_RESULT=1
            fi
            
            # Create status file
            echo "LINT_RESULT=$LINT_RESULT" > /tmp/build_status
            echo "TEST_RESULT=$TEST_RESULT" >> /tmp/build_status
            
            # Exit with error if either lint or test failed
            [ $LINT_RESULT -eq 0 ] && [ $TEST_RESULT -eq 0 ]
      
      - notify-telegram:
          status: success
          step: "Build & Test"
      - run:
          when: on_fail
          command: |
            notify-telegram:
              status: failure
              step: "Build & Test"

  deploy:
    docker:
      - image: cimg/node:18.0
    steps:
      - checkout
      - run:
          name: Prepare for Deployment
          command: |
            # Ensure server/package.json exists in the deployment
            cd server
            npm install --production
      - run:
          name: Deploy to Render
          command: |
            # Deploy with proper path configuration
            curl -X POST \
              -H "Accept: application/json" \
              -H "Content-Type: application/json" \
              -d '{"path": "server"}' \
              "https://api.render.com/deploy/srv-ctl3cnlds78s73c3ktdg?key=rnd_aNr7V6i33gzm6QE3BeyGvJwwmohf"
            
            echo "Deployment triggered successfully. Check Render dashboard for status."
      - run:
          name: Wait for Deployment and Monitor Status
          command: |
            echo "Checking deployment status..."
            
            MAX_RETRIES=20  # Tổng thời gian tối đa = 20 * 10s = 200s
            RETRY_COUNT=0
            
            # Function to check service status
            check_services() {
              # Check backend
              if curl -s https://circleci-demo.onrender.com/health | grep -q "healthy"; then
                BACKEND_OK=1
              else
                BACKEND_OK=0
              fi
              
              # Check frontend
              if curl -s -f https://circleci-demo-1.onrender.com > /dev/null; then
                FRONTEND_OK=1
              else
                FRONTEND_OK=0
              fi
              
              # Return success if both are up
              [ $BACKEND_OK -eq 1 ] && [ $FRONTEND_OK -eq 1 ]
            }
            
            # Loop until both services are up or max retries reached
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
              
              if check_services; then
                echo "✅ All services are up!"
                break
              fi
              
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "❌ Deployment check timed out after $MAX_RETRIES attempts"
                # Continue anyway as services might still be starting
              else
                echo "⏳ Waiting 10 seconds before next check..."
                sleep 10
              fi
            done

      - notify-telegram:
          status: success
          step: "Deploy"
      - run:
          when: on_fail
          command: |
            notify-telegram:
              status: failure
              step: "Deploy"

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            branches:
              only: 
                - main
                - master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: 
                - main
                - master